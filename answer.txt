Nguyen Minh Duy - 20210270
************* LAB02 ************

1. If you create a constructor method to build a DVD by title then create a constructor method to build
a DVD by category. Does JAVA allow you to do this?

    Giống như phương thức trong Java, Java cho phép tạo ra các constructor với các danh sách tham số khác nhau.
    Java phân biệt các constructor bởi tổng tham số truyền và kiểu của chúng và khi người lập trình không tạo constructor 
    thì java sẽ tạo ra constructor mặc định không có tham số 

************* LAB03 ************
Question: Is JAVA a Pass By Value  or a Pass By Reference programming language?

    JAVA là ngôn ngữ "Truyền tham trị"(Pass By Value). 
    Đó là khi bạn truyền một kiểu dữ liệu nguyên thủy vào một phương thức, bạn truyền giá trị thực sự của biến đó.
    Khi bạn truyền một đối tượng vào một phương thức, bạn truyền giá trị của tham chiếu không phải là đối tượng thực sự. 
    Bất kỳ thay đổi nào được thực hiện trên tham số bên trong 1 phương thức đều không ảnh hưởng đến biến gốc bên ngoài phương thức
    Cụ thể trong Lab 3: Title của 2 đối tượng jungleDVD và cinderellaDVD trong lớp TestPassingParameter với hàm swap cũng không thể thay đổi được title thực sự của đối tượng.
    Hàm swap không đổi là vì hàm này chỉ đổi chỗ 2 biến cục bộ mới được tạo của 2 đối tượng chứ không phải 2 đối tượng thực sự. 
    Hàm changeTitle chỉ làm thay đổi tiêu đề của bản sao jungleDVD bên trong chứ không làm thay đổi jungleDVD mà tham chiếu tới nên tiêu đề của biến jungleDVD bên trong phương thức. 

************* LAB04 ************
Question: 
-	What class should implement the Comparable interface?
-	In those classes, how should you implement the compareTo()method be to reflect the ordering that we want?
-	Can we have two ordering rules of the item (by title then cost and by cost then title) if we use this Comparable interface approach?
-	Suppose the DVDs has a different ordering rule from the other media types, that is by title, then decreasing length, then cost. How would you modify your code to allow this?

1. Lớp đại diện cho các mục trong giỏ hàng nên triển khai giao diện Comparable. 
Trong trường hợp này, có thể là lớp Media hoặc các lớp con của nó, phụ thuộc vào cách bạn tổ chức các lớp của mình.

2. Phương thức compareTo() nên được triển khai để xác định thứ tự tự nhiên của các thể hiện của lớp. 
Nó nên trả về một số nguyên âm, số không hoặc số nguyên dương nếu thể hiện hiện tại là ít hơn, bằng hoặc lớn hơn đối tượng được chỉ định tương ứng. 

3. Không, giao diện Comparable xác định một thứ tự tự nhiên duy nhất cho lớp. 
Nếu muốn hỗ trợ các quy tắc sắp xếp khác nhau, thông thường bạn sẽ sử dụng phương thức tiếp cận Comparator.
+ trả về <0 thì chuỗi gọi phương thức là từ vựng trước tiên
+ trả về == 0 thì hai chuỗi tương đương về mặt từ vựng
+ trả về> 0 thì tham số được truyền cho phương thức so sánh trước tiên là từ vựng.

4. Để xử lý quy tắc sắp xếp khác biệt cho DVDs, bạn có thể tạo một comparator riêng cho DVDs và sử dụng nó khi cần thiết.
public class DVDComparator implements Comparator<DVD> {
    public int compare(DVD dvd1, DVD dvd2) {
        int titleComparison = dvd1.getTitle().compareTo(dvd2.getTitle());

        if (titleComparison == 0) {
            // Nếu các tiêu đề giống nhau, so sánh theo chiều dài giảm dần
            int lengthComparison = Integer.compare(dvd2.getLength(), dvd1.getLength());
            
            if (lengthComparison == 0) {
                // Nếu chiều dài giống nhau, so sánh theo giá tăng dần
                return Double.compare(dvd1.getCost(), dvd2.getCost());
            }
            
            return lengthComparison;
        }

        return titleComparison;
    }
}

// Trong lớp DVD:
public class DVD extends Media implements Comparable<DVD> {
    // ... các thuộc tính và phương thức khác ...

    public int compareTo(DVD otherDVD) {
        return new DVDComparator().compare(this, otherDVD);
    }
}

************* LAB05 ************
Question: The Aims class must be updated to handle any exceptions generated when the play() methods are called. 
What happens when you don’t update for them to catch?
Khi bạn không cập nhật lớp Aims để xử lý các ngoại lệ xuất hiện khi phương thức play() được gọi, những ngoại lệ này sẽ truyền lên ngăn xếp cuộc gọi. 
Nếu một ngoại lệ không được bắt và xử lý ở mức độ phù hợp, điều này sẽ dẫn đến một ngoại lệ chưa được xử lý, thường dẫn đến việc chương trình bị chấm dứt và hiển thị thông báo lỗi.

Dưới đây là những điều xảy ra khi một ngoại lệ không được bắt:

Chấm Dứt Chương Trình: Nếu có một ngoại lệ xảy ra trong phương thức play() và không được bắt trong phương thức đó hoặc truyền lên để bắt ở mức độ mã nguồn cao hơn, chương trình sẽ kết thúc đột ngột.

Thông Báo Lỗi: Hệ thống có thể hiển thị một thông báo lỗi bao gồm thông tin về loại ngoại lệ, vị trí xảy ra, và dòng ngăn xếp (một danh sách các cuộc gọi phương thức dẫn đến điểm ngoại lệ).

Không Giải Phóng Tài Nguyên: Nếu phương thức play() liên quan đến bất kỳ tài nguyên nào như quản lý tệp, kết nối mạng hoặc các tài nguyên bên ngoại khác, chúng có thể không được giải phóng hoặc đóng đúng cách, dẫn đến rủi ro rò rỉ tài nguyên.

Mất Đồng Nhất Dữ Liệu: Nếu phương thức play() là một phần của một hoạt động lớn hơn và có một ngoại lệ xảy ra, chương trình có thể bị để lại trong trạng thái không đồng nhất. 
Dữ liệu có thể được xử lý một cách một phần hoặc để lại trong một trạng thái không mong muốn.